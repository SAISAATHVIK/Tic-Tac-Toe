def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("---------")

def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    if is_winner(board, 'X'):
        return -1
    if is_winner(board, 'O'):
        return 1
    if is_board_full(board):
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Example usage:
board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]

while not is_winner(board, 'X') and not is_winner(board, 'O') and not is_board_full(board):
    print_board(board)
    player_row = int(input("Enter row (0, 1, or 2): "))
    player_col = int(input("Enter column (0, 1, or 2): "))
    
    if board[player_row][player_col] == ' ':
        board[player_row][player_col] = 'X'
    else:
        print("Cell already taken. Try again.")
        continue

    if is_winner(board, 'X'):
        print_board(board)
        print("You win!")
        break
    elif is_board_full(board):
        print_board(board)
        print("It's a tie!")
        break

    print("Computer's turn:")
    computer_row, computer_col = best_move(board)
    board[computer_row][computer_col] = 'O'

    if is_winner(board, 'O'):
        print_board(board)
        print("Computer wins!")
        break
    elif is_board_full(board):
        print_board(board)
        print("It's a tie!")
        break
